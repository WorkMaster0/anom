# anom_bot.py
import sqlite3
import requests
import time
import json
import logging
import random
import re
from datetime import datetime

# ===== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø =====
TOKEN = "8063113740:AAGC-9PHzZD65jPad2lxP5mTmlWuQwvKwrU"
DB_NAME = "anom_bot.db"
COINGECKO_API_URL = "https://api.coingecko.com/api/v3"
REQUEST_LIMIT = 30
REQUEST_DELAY = 60 / REQUEST_LIMIT
last_request_time = 0

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

price_cache = {}
CACHE_TIME = 300
alerts = {}
subscriptions = {}

# ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ë–î =====
def init_db():
    conn = None
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS subscriptions (
            chat_id INTEGER,
            coin_id TEXT,
            coin_name TEXT,
            PRIMARY KEY (chat_id, coin_id))
        """)
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS alerts (
            chat_id INTEGER,
            coin_id TEXT,
            operator TEXT,
            target_price REAL,
            triggered BOOLEAN DEFAULT FALSE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)
        """)
        conn.commit()
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
        return True
    except sqlite3.Error as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ë–î: {e}")
        return False
    finally:
        if conn: conn.close()

# ===== API =====
def telegram_request(method, params):
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/{method}"
        response = requests.post(url, json=params, timeout=15)
        return response.json()
    except Exception as e:
        logging.error(f"Telegram API error: {e}")
        return None

def send_message(chat_id, text):
    params = {'chat_id': chat_id, 'text': text, 'parse_mode': 'HTML', 'disable_web_page_preview': True}
    return telegram_request("sendMessage", params)

def coingecko_request(endpoint, params=None):
    global last_request_time
    try:
        elapsed = time.time() - last_request_time
        if elapsed < REQUEST_DELAY:
            time.sleep(REQUEST_DELAY - elapsed)
        url = f"{COINGECKO_API_URL}/{endpoint}"
        response = requests.get(url, params=params, timeout=15)
        last_request_time = time.time()
        if response.status_code != 200:
            raise Exception(f"API Error {response.status_code}: {response.text}")
        return response.json()
    except Exception as e:
        logging.error(f"CoinGecko API error: {e}")
        return None

# ===== –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á =====
def get_price(coin_id):
    now = time.time()
    if coin_id in price_cache and now - price_cache[coin_id]['timestamp'] < CACHE_TIME:
        return price_cache[coin_id]['price']
    
    data = coingecko_request(f"simple/price", {'ids': coin_id, 'vs_currencies': 'usd'})
    if not data or coin_id not in data:
        raise Exception("–ú–æ–Ω–µ—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    price = data[coin_id]['usd']
    price_cache[coin_id] = {'price': price, 'timestamp': now}
    return price

def format_number(num):
    if num >= 1_000_000_000:
        return f"{num/1_000_000_000:.2f}B"
    elif num >= 1_000_000:
        return f"{num/1_000_000:.2f}M"
    elif num >= 1_000:
        return f"{num/1_000:.2f}K"
    else:
        return f"{num:.2f}"

def coin_icon(symbol):
    icons = {
        "BTC": "‚Çø", "ETH": "‚óä", "BNB": "üî∂", "ADA": "üÖ∞Ô∏è", 
        "XRP": "üåä", "DOGE": "üê∂", "SHIB": "ü¶ä", "PEPE": "üê∏",
        "SOL": "üîÜ", "DOT": "üî¥", "AVAX": "‚ùÑÔ∏è", "MATIC": "üî∑"
    }
    return icons.get(symbol.upper(), "üíé")

# ===== –ö–û–ú–ê–ù–î–ò –î–õ–Ø –ê–ù–û–ú–ê–õ–¨–ù–ò–• –¢–û–ö–ï–ù–Ü–í =====
def handle_start(chat_id):
    msg = (
        "üöÄ <b>Anom Token Hunter Bot</b> üîç\n\n"
        "–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –±–æ—Ç –¥–ª—è –ø–æ—à—É–∫—É –∞–Ω–æ–º–∞–ª—å–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ –∑ –º–∞–ª–æ—é –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—î—é\n\n"
        "üìä <b>–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /scan - –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∞–Ω–æ–º–∞–ª—å–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤\n"
        "‚Ä¢ /lowcap - –¢–æ–ø –º–∞–ª–æ–∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ–π–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤\n"
        "‚Ä¢ /volume - –¢–æ–∫–µ–Ω–∏ –∑ –∞–Ω–æ–º–∞–ª—å–Ω–∏–º –æ–±'—î–º–æ–º —Ç–æ—Ä–≥—ñ–≤\n"
        "‚Ä¢ /price [id] - –¶—ñ–Ω–∞ —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä: bitcoin)\n"
        "‚Ä¢ /info [id] - –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–æ–∫–µ–Ω\n"
        "‚Ä¢ /subscribe [id] - –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–∫–µ–Ω\n"
        "‚Ä¢ /unsubscribe [id] - –í—ñ–¥–ø–∏—Å–∫–∞\n"
        "‚Ä¢ /mysubs - –ú–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏\n"
        "‚Ä¢ /alert [id][> –∞–±–æ <][—Ü—ñ–Ω–∞] - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è\n"
        "‚Ä¢ /help - –î–æ–ø–æ–º–æ–≥–∞"
    )
    send_message(chat_id, msg)

def handle_help(chat_id):
    msg = (
        "üÜò <b>–î–æ–ø–æ–º–æ–≥–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞</b>\n\n"
        "üîç <b>–ü–æ—à—É–∫ –∞–Ω–æ–º–∞–ª—ñ–π:</b>\n"
        "‚Ä¢ /scan - –°–∫–∞–Ω—É—î —Ä–∏–Ω–æ–∫ –Ω–∞ –∞–Ω–æ–º–∞–ª—å–Ω—ñ —Ç–æ–∫–µ–Ω–∏\n"
        "‚Ä¢ /lowcap - –¢–æ–ø 10 –º–∞–ª–æ–∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ–π–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ –∑ –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª–æ–º\n"
        "‚Ä¢ /volume - –¢–æ–∫–µ–Ω–∏ –∑ –Ω–µ–∑–≤–∏—á–Ω–æ –≤–∏—Å–æ–∫–∏–º –æ–±'—î–º–æ–º —Ç–æ—Ä–≥—ñ–≤\n\n"
        "üìà <b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b>\n"
        "‚Ä¢ /price bitcoin - –¶—ñ–Ω–∞ BTC\n"
        "‚Ä¢ /info ethereum - –î–µ—Ç–∞–ª—ñ –ø—Ä–æ Ethereum\n\n"
        "üîî <b>–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è:</b>\n"
        "‚Ä¢ /subscribe solana - –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ Solana\n"
        "‚Ä¢ /alert bitcoin>50000 - –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–∏ —Ü—ñ–Ω—ñ >50000\n"
        "‚Ä¢ /mysubs - –ü–µ—Ä–µ–≥–ª—è–¥ –ø—ñ–¥–ø–∏—Å–æ–∫"
    )
    send_message(chat_id, msg)

def handle_scan_anomalies(chat_id):
    try:
        send_message(chat_id, "üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–∏–Ω–∫—É –Ω–∞ –∞–Ω–æ–º–∞–ª—å–Ω—ñ —Ç–æ–∫–µ–Ω–∏...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ —Ç–æ–ø 200 —Ç–æ–∫–µ–Ω—ñ–≤
        data = coingecko_request("coins/markets", {
            'vs_currency': 'usd',
            'order': 'market_cap_desc',
            'per_page': 200,
            'page': 1,
            'price_change_percentage': '1h,24h,7d'
        })
        
        if not data:
            send_message(chat_id, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ")
            return
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –º–∞–ª–æ–∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ–π–Ω—ñ —Ç–æ–∫–µ–Ω–∏ (1M - 100M)
        low_cap_tokens = [token for token in data if 1_000_000 <= token['market_cap'] <= 100_000_000]
        
        # –®—É–∫–∞—î–º–æ –∞–Ω–æ–º–∞–ª—ñ—ó: –≤–∏—Å–æ–∫–∞ –∑–º—ñ–Ω–∞ —Ü—ñ–Ω–∏ + –≤–∏—Å–æ–∫–∏–π –æ–±'—î–º
        anomalies = []
        for token in low_cap_tokens:
            price_change_24h = token.get('price_change_percentage_24h', 0)
            volume_ratio = token.get('total_volume', 0) / token.get('market_cap', 1)
            
            # –ö—Ä–∏—Ç–µ—Ä—ñ—ó –∞–Ω–æ–º–∞–ª—ñ—ó: –∑–º—ñ–Ω–∞ > 20% —ñ –æ–±'—î–º > 10% –≤—ñ–¥ –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó
            if abs(price_change_24h) > 20 and volume_ratio > 0.1:
                anomalies.append(token)
        
        if not anomalies:
            send_message(chat_id, "üìä –ê–Ω–æ–º–∞–ª—å–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            return
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –æ–±'—î–º–æ–º —Ç–æ—Ä–≥—ñ–≤
        anomalies.sort(key=lambda x: x['total_volume'] / x['market_cap'], reverse=True)
        
        msg = ["üö® <b>–ó–Ω–∞–π–¥–µ–Ω–æ –∞–Ω–æ–º–∞–ª—å–Ω—ñ —Ç–æ–∫–µ–Ω–∏:</b>\n"]
        for i, token in enumerate(anomalies[:5], 1):
            change_24h = token.get('price_change_percentage_24h', 0)
            volume_ratio = (token['total_volume'] / token['market_cap']) * 100
            
            msg.append(
                f"{i}. {coin_icon(token['symbol'])} <b>{token['symbol'].upper()}</b>\n"
                f"   üí∞ –¶—ñ–Ω–∞: ${token['current_price']:.6f}\n"
                f"   üìà –ó–º—ñ–Ω–∞ 24h: {change_24h:+.2f}%\n"
                f"   üíº –ö–∞–ø–∞: ${format_number(token['market_cap'])}\n"
                f"   üìä –û–±'—î–º: {volume_ratio:.1f}% –≤—ñ–¥ –∫–∞–ø–∏\n"
                f"   üîó /info_{token['id']}\n"
            )
        
        send_message(chat_id, "\n".join(msg))
        
    except Exception as e:
        logging.error(f"Scan error: {e}")
        send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—ñ")

def handle_lowcap_tokens(chat_id):
    try:
        data = coingecko_request("coins/markets", {
            'vs_currency': 'usd',
            'order': 'market_cap_asc',  # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó
            'per_page': 50,
            'page': 1,
            'price_change_percentage': '24h'
        })
        
        if not data:
            send_message(chat_id, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ")
            return
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç–æ–∫–µ–Ω–∏ –∑ –∫–∞–ø–æ—é 100K - 10M
        promising_tokens = [
            token for token in data 
            if 100_000 <= token['market_cap'] <= 10_000_000 and token['total_volume'] > 10_000
        ]
        
        if not promising_tokens:
            send_message(chat_id, "üìä –ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º —Ü—ñ–Ω–∏
        promising_tokens.sort(key=lambda x: x.get('price_change_percentage_24h', 0), reverse=True)
        
        msg = ["üíé <b>–¢–æ–ø –º–∞–ª–æ–∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ–π–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤:</b>\n"]
        for i, token in enumerate(promising_tokens[:10], 1):
            change_24h = token.get('price_change_percentage_24h', 0)
            
            msg.append(
                f"{i}. {coin_icon(token['symbol'])} <b>{token['symbol'].upper()}</b>\n"
                f"   üí∞ –¶—ñ–Ω–∞: ${token['current_price']:.8f}\n"
                f"   üìà –ó–º—ñ–Ω–∞: {change_24h:+.2f}%\n"
                f"   üíº –ö–∞–ø–∞: ${format_number(token['market_cap'])}\n"
                f"   üîó /info_{token['id']}\n"
            )
        
        send_message(chat_id, "\n".join(msg))
        
    except Exception as e:
        logging.error(f"Lowcap error: {e}")
        send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É —Ç–æ–∫–µ–Ω—ñ–≤")

def handle_volume_anomalies(chat_id):
    try:
        data = coingecko_request("coins/markets", {
            'vs_currency': 'usd',
            'order': 'volume_desc',
            'per_page': 100,
            'page': 1
        })
        
        if not data:
            send_message(chat_id, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ")
            return
        
        # –®—É–∫–∞—î–º–æ —Ç–æ–∫–µ–Ω–∏ –∑ –æ–±'—î–º–æ–º > 50% –≤—ñ–¥ –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó
        volume_anomalies = []
        for token in data:
            if token['market_cap'] > 0:
                volume_ratio = token['total_volume'] / token['market_cap']
                if volume_ratio > 0.5 and token['market_cap'] < 50_000_000:
                    volume_anomalies.append((token, volume_ratio))
        
        if not volume_anomalies:
            send_message(chat_id, "üìä –ê–Ω–æ–º–∞–ª—ñ–π –æ–±'—î–º—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è–º –æ–±'—î–º—É –¥–æ –∫–∞–ø–∏
        volume_anomalies.sort(key=lambda x: x[1], reverse=True)
        
        msg = ["üìä <b>–¢–æ–∫–µ–Ω–∏ –∑ –∞–Ω–æ–º–∞–ª—å–Ω–∏–º –æ–±'—î–º–æ–º —Ç–æ—Ä–≥—ñ–≤:</b>\n"]
        for i, (token, ratio) in enumerate(volume_anomalies[:8], 1):
            msg.append(
                f"{i}. {coin_icon(token['symbol'])} <b>{token['symbol'].upper()}</b>\n"
                f"   üí∞ –¶—ñ–Ω–∞: ${token['current_price']:.6f}\n"
                f"   üíº –ö–∞–ø–∞: ${format_number(token['market_cap'])}\n"
                f"   üìà –û–±'—î–º: {ratio*100:.1f}% –≤—ñ–¥ –∫–∞–ø–∏\n"
                f"   üîó /info_{token['id']}\n"
            )
        
        send_message(chat_id, "\n".join(msg))
        
    except Exception as e:
        logging.error(f"Volume anomaly error: {e}")
        send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∞–Ω–æ–º–∞–ª—ñ–π")

def handle_price(chat_id, args):
    if not args:
        send_message(chat_id, "‚ÑπÔ∏è –í–≤–µ–¥—ñ—Ç—å ID —Ç–æ–∫–µ–Ω–∞, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /price bitcoin")
        return
    
    coin_id = args[0].lower()
    try:
        price = get_price(coin_id)
        send_message(chat_id, f"{coin_icon(coin_id)} <b>{coin_id.upper()}</b>: ${price:.8f}")
    except Exception as e:
        send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

def handle_info(chat_id, args):
    if not args:
        send_message(chat_id, "‚ÑπÔ∏è –í–≤–µ–¥—ñ—Ç—å ID —Ç–æ–∫–µ–Ω–∞, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /info ethereum")
        return
    
    coin_id = args[0].lower()
    try:
        data = coingecko_request(f"coins/{coin_id}")
        if not data:
            send_message(chat_id, "‚ùå –¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        market_data = data['market_data']
        msg = (
            f"{coin_icon(data['symbol'])} <b>{data['name']} ({data['symbol'].upper()})</b>\n\n"
            f"üí∞ <b>–¶—ñ–Ω–∞:</b> ${market_data['current_price']['usd']:.8f}\n"
            f"üìà <b>–ó–º—ñ–Ω–∞ 24h:</b> {market_data['price_change_percentage_24h']:+.2f}%\n"
            f"üíº <b>–ö–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è:</b> ${format_number(market_data['market_cap']['usd'])}\n"
            f"üìä <b>–û–±'—î–º 24h:</b> ${format_number(market_data['total_volume']['usd'])}\n"
            f"üî¢ <b>–†–∞–Ω–≥:</b> #{data['market_cap_rank'] or 'N/A'}\n\n"
            f"üåê <b>–°–∞–π—Ç:</b> {data['links']['homepage'][0] if data['links']['homepage'] else 'N/A'}\n"
            f"üìñ <b>–û–ø–∏—Å:</b> {data['description']['en'][:200] + '...' if data['description']['en'] else '–ù–µ–º–∞—î –æ–ø–∏—Å—É'}"
        )
        send_message(chat_id, msg)
    except Exception as e:
        logging.error(f"Info error: {e}")
        send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó")

# ===== –°–ò–°–¢–ï–ú–ê –ü–Ü–î–ü–ò–°–û–ö –¢–ê –°–ü–û–í–Ü–©–ï–ù–¨ =====
def handle_subscribe(chat_id, args):
    if not args:
        send_message(chat_id, "‚ÑπÔ∏è –í–≤–µ–¥—ñ—Ç—å ID —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏")
        return
    
    coin_id = args[0].lower()
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç–æ–∫–µ–Ω —ñ—Å–Ω—É—î
        price = get_price(coin_id)
        
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute(
            "INSERT OR IGNORE INTO subscriptions (chat_id, coin_id, coin_name) VALUES (?, ?, ?)",
            (chat_id, coin_id, coin_id)
        )
        conn.commit()
        conn.close()
        
        send_message(chat_id, f"‚úÖ –ü—ñ–¥–ø–∏—Å–∞–Ω–æ –Ω–∞ {coin_id.upper()}")
    except Exception as e:
        send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

def handle_unsubscribe(chat_id, args):
    if not args:
        send_message(chat_id, "‚ÑπÔ∏è –í–≤–µ–¥—ñ—Ç—å ID —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –≤—ñ–¥–ø–∏—Å–∫–∏")
        return
    
    coin_id = args[0].lower()
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute(
            "DELETE FROM subscriptions WHERE chat_id = ? AND coin_id = ?",
            (chat_id, coin_id)
        )
        conn.commit()
        conn.close()
        
        send_message(chat_id, f"‚ùå –í—ñ–¥–ø–∏—Å–∞–Ω–æ –≤—ñ–¥ {coin_id.upper()}")
    except Exception as e:
        send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

def handle_mysubs(chat_id):
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute(
            "SELECT coin_id FROM subscriptions WHERE chat_id = ?",
            (chat_id,)
        )
        subs = cursor.fetchall()
        conn.close()
        
        if not subs:
            send_message(chat_id, "üì≠ –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—ñ–¥–ø–∏—Å–æ–∫")
            return
        
        msg = ["üìã <b>–í–∞—à—ñ –ø—ñ–¥–ø–∏—Å–∫–∏:</b>\n"]
        for i, (coin_id,) in enumerate(subs, 1):
            try:
                price = get_price(coin_id)
                msg.append(f"{i}. {coin_icon(coin_id)} {coin_id.upper()} - ${price:.8f}")
            except:
                msg.append(f"{i}. {coin_id.upper()} - ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
        
        send_message(chat_id, "\n".join(msg))
    except Exception as e:
        send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

def handle_alert(chat_id, args):
    if not args:
        send_message(chat_id, "‚ÑπÔ∏è –ü—Ä–∏–∫–ª–∞–¥: /alert bitcoin>50000")
        return
    
    try:
        match = re.match(r"([a-zA-Z0-9]+)([<>])([0-9.]+)", args[0])
        if not match:
            send_message(chat_id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–∫–ª–∞–¥: bitcoin>50000")
            return
        
        coin_id, operator, target_price = match.groups()
        coin_id = coin_id.lower()
        target_price = float(target_price)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç–æ–∫–µ–Ω —ñ—Å–Ω—É—î
        get_price(coin_id)
        
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO alerts (chat_id, coin_id, operator, target_price) VALUES (?, ?, ?, ?)",
            (chat_id, coin_id, operator, target_price)
        )
        conn.commit()
        conn.close()
        
        send_message(chat_id, f"üö® –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {coin_id.upper()} {operator} ${target_price:.2f}")
    except Exception as e:
        send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

def check_alerts():
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM alerts WHERE triggered = FALSE")
        active_alerts = cursor.fetchall()
        
        for alert in active_alerts:
            alert_id, chat_id, coin_id, operator, target_price, triggered, created_at = alert
            
            try:
                current_price = get_price(coin_id)
                should_trigger = False
                
                if operator == ">" and current_price > target_price:
                    should_trigger = True
                elif operator == "<" and current_price < target_price:
                    should_trigger = True
                
                if should_trigger:
                    cursor.execute(
                        "UPDATE alerts SET triggered = TRUE WHERE id = ?",
                        (alert_id,)
                    )
                    conn.commit()
                    
                    send_message(
                        chat_id,
                        f"üö® <b>–°–ü–û–í–Ü–©–ï–ù–ù–Ø</b>\n"
                        f"{coin_icon(coin_id)} {coin_id.upper()} {operator} ${target_price:.2f}\n"
                        f"–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: ${current_price:.8f}\n"
                        f"–ß–∞—Å: {datetime.now().strftime('%H:%M:%S')}"
                    )
                    
            except Exception as e:
                logging.error(f"Alert check error for {coin_id}: {e}")
                continue
        
        conn.close()
    except Exception as e:
        logging.error(f"Alert system error: {e}")

# ===== –û–ë–†–û–ë–ö–ê –û–ù–û–í–õ–ï–ù–¨ =====
def process_updates(updates, last_update_id):
    new_last_id = last_update_id
    for update in updates.get('result', []):
        try:
            new_last_id = max(new_last_id, update['update_id'])
            message = update.get('message', {})
            chat_id = message.get('chat', {}).get('id')
            text = message.get('text', '').strip()
            
            if not text or not chat_id:
                continue
            
            # –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ –∑ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, /info_bitcoin)
            if text.startswith('/info_'):
                coin_id = text[6:]
                handle_info(chat_id, [coin_id])
                continue
            
            parts = text.split()
            cmd = parts[0].lower()
            args = parts[1:] if len(parts) > 1 else []
            
            if cmd == "/start":
                handle_start(chat_id)
            elif cmd == "/help":
                handle_help(chat_id)
            elif cmd == "/scan":
                handle_scan_anomalies(chat_id)
            elif cmd == "/lowcap":
                handle_lowcap_tokens(chat_id)
            elif cmd == "/volume":
                handle_volume_anomalies(chat_id)
            elif cmd == "/price":
                handle_price(chat_id, args)
            elif cmd == "/info":
                handle_info(chat_id, args)
            elif cmd == "/subscribe":
                handle_subscribe(chat_id, args)
            elif cmd == "/unsubscribe":
                handle_unsubscribe(chat_id, args)
            elif cmd == "/mysubs":
                handle_mysubs(chat_id)
            elif cmd == "/alert":
                handle_alert(chat_id, args)
            else:
                send_message(chat_id, "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. /help")
                
        except Exception as e:
            logging.error(f"Processing update error: {e}")
    
    return new_last_id

def main():
    if not init_db():
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –±–æ—Ç–∞")
        return
    
    print("üöÄ Anom Token Hunter Bot –∑–∞–ø—É—â–µ–Ω–æ!")
    last_update_id = 0
    
    while True:
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            updates = telegram_request("getUpdates", {
                'offset': last_update_id + 1,
                'timeout': 30
            })
            
            if updates and updates.get('ok'):
                last_update_id = process_updates(updates, last_update_id)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
            check_alerts()
            time.sleep(1)
            
        except Exception as e:
            logging.error(f"Main loop error: {e}")
            time.sleep(5)

if __name__ == "__main__":
    main()
