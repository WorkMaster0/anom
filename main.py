import os
import asyncio
import logging
import aiohttp
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message

from fastapi import FastAPI, Request
from aiogram.types import Update
import uvicorn

# ======================
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
# ======================
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ù–∞–ø—Ä. https://your-app.onrender.com/webhook

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("ultimaster-bot")

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()

app = FastAPI()

JUPITER_API = "https://price.jup.ag/v4/tokens"  # –∞–∫—Ç—É–∞–ª—å–Ω–∏–π endpoint

# ======================
# Jupiter API
# ======================
async def get_jupiter_data():
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(JUPITER_API) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    return data.get("data", [])
                else:
                    logger.error(f"Jupiter API failed: {resp.status}")
                    return []
    except Exception as e:
        logger.error(f"Jupiter request error: {e}")
        return []

# ======================
# –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
# ======================
def format_token(token):
    price = float(token.get("price", 0))
    change = float(token.get("change24h", 0))
    volume = float(token.get("volume24h", 0))
    symbol = token.get("symbol", "")
    name = token.get("name", "")
    contract = token.get("address", "")

    return (
        f"‚Ä¢ <b>{name}</b> (<code>{symbol}</code>)\n"
        f"   üí≤ –¶—ñ–Ω–∞: <b>${price:.6f}</b>\n"
        f"   üìà –ó–º—ñ–Ω–∞ (24h): <b>{change:+.2f}%</b>\n"
        f"   üíπ –û–±—Å—è–≥: <b>${volume:,.0f}</b>\n"
        f"   üîó –ö–æ–Ω—Ç—Ä–∞–∫—Ç: <code>{contract}</code>\n"
    )

def get_top_gainers(tokens, limit=10):
    return sorted(tokens, key=lambda t: float(t.get("change24h", 0)), reverse=True)[:limit]

def get_top_volume(tokens, limit=10):
    return sorted(tokens, key=lambda t: float(t.get("volume24h", 0)), reverse=True)[:limit]

# ======================
# –ö–æ–º–∞–Ω–¥–∏
# ======================
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –∫—Ä–∏–ø—Ç–æ-–±–æ—Ç –Ω–∞ –±–∞–∑—ñ Jupiter.\n\n"
        "üìå –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/topgainers ‚Äî üöÄ —Ç–æ–ø —Ä–æ—Å—Ç—É—á–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ (24h)\n"
        "/topvol ‚Äî üíπ —Ç–æ–ø —Ç–æ–∫–µ–Ω—ñ–≤ –∑–∞ –æ–±—Å—è–≥–æ–º (24h)\n"
        "/hiddengems ‚Äî üíé –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ\n"
        "/help ‚Äî ‚ÑπÔ∏è –¥–æ–ø–æ–º–æ–≥–∞"
    )

@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "‚ÑπÔ∏è <b>–ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞:</b>\n"
        "/topgainers ‚Äî üöÄ —Ç–æ–ø —Ä–æ—Å—Ç—É—á–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ (24h)\n"
        "/topvol ‚Äî üíπ —Ç–æ–ø —Ç–æ–∫–µ–Ω—ñ–≤ –∑–∞ –æ–±—Å—è–≥–æ–º (24h)\n"
        "/hiddengems ‚Äî üíé –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ\n"
    )

@dp.message(Command("topgainers"))
async def top_gainers(message: Message):
    tokens = await get_jupiter_data()
    if not tokens:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –≤—ñ–¥ Jupiter.")
        return
    top = get_top_gainers(tokens)
    msg = "üöÄ <b>–¢–æ–ø —Ä–æ—Å—Ç—É—á–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ (24h):</b>\n\n"
    msg += "\n".join([format_token(t) for t in top])
    await message.answer(msg)

@dp.message(Command("topvol"))
async def top_volume(message: Message):
    tokens = await get_jupiter_data()
    if not tokens:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –≤—ñ–¥ Jupiter.")
        return
    top = get_top_volume(tokens)
    msg = "üíπ <b>–¢–æ–ø –∑–∞ –æ–±—Å—è–≥–æ–º (24h):</b>\n\n"
    msg += "\n".join([format_token(t) for t in top])
    await message.answer(msg)

@dp.message(Command("hiddengems"))
async def hidden_gems(message: Message):
    tokens = await get_jupiter_data()
    if not tokens:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –≤—ñ–¥ Jupiter.")
        return
    # —Ñ—ñ–ª—å—Ç—Ä: –Ω–∏–∑—å–∫–∞ –∫–∞–ø–∞, –∞–ª–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–∞ –∑–º—ñ–Ω–∞
    gems = [
        t for t in tokens
        if float(t.get("marketCap", 0)) < 2_000_000
        and float(t.get("change24h", 0)) > 10
    ]
    if not gems:
        await message.answer("üòî –ù–µ–º–∞—î –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ –∑–∞—Ä–∞–∑.")
        return
    msg = "üíé <b>Hidden Gems:</b>\n\n"
    msg += "\n".join([format_token(t) for t in gems[:10]])
    await message.answer(msg)

# ======================
# FastAPI Webhook
# ======================
@app.on_event("startup")
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL)
    logger.info("‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

@app.on_event("shutdown")
async def on_shutdown():
    await bot.delete_webhook()
    logger.info("üõë Webhook –≤–∏–¥–∞–ª–µ–Ω–æ")

@app.post("/webhook")
async def webhook(request: Request):
    data = await request.json()
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)
    return {"ok": True}

@app.get("/")
async def root():
    return {"status": "–±–æ—Ç –ø—Ä–∞—Ü—é—î üöÄ"}

# ======================
# –ó–∞–ø—É—Å–∫ (–ª–æ–∫–∞–ª—å–Ω–æ / Render)
# ======================
if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=int(os.getenv("PORT", 8080)))
