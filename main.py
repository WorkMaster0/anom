import os
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.webhook.aiohttp_server import setup_application
from aiohttp import web
import aiohttp

# =======================
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
# =======================
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "–í–ê–®_TELEGRAM_TOKEN")
MOBULA_API_KEY = os.environ.get("MOBULA_API_KEY", "–í–ê–®_MOBULA_API_KEY")
APP_BASE_URL = os.environ.get("APP_BASE_URL", "https://your-domain.tld")
WEBHOOK_PATH = f"/webhook/{TELEGRAM_TOKEN}"
WEBHOOK_URL = APP_BASE_URL + WEBHOOK_PATH
PORT = int(os.environ.get("PORT", 8000))

# –û–ø—Ü—ñ–π–Ω–æ: –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –≤—ñ–¥–±–æ—Ä—É –º–æ–Ω–µ—Ç
MIN_CAP = int(os.environ.get("MIN_CAP", 100_000_000))
MIN_VOLUME = int(os.environ.get("MIN_VOLUME", 10_000))
MIN_PRICE_CHANGE = float(os.environ.get("MIN_PRICE_CHANGE", 20))

CHECK_INTERVAL = int(os.environ.get("CHECK_INTERVAL", 120))  # —Å–µ–∫—É–Ω–¥

# =======================
# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
# =======================
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# =======================
# –•–µ–Ω–¥–ª–µ—Ä–∏ –∫–æ–º–∞–Ω–¥
# =======================
@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø CryptoBot üöÄ\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /help –¥–ª—è –∫–æ–º–∞–Ω–¥.")

@dp.message(Command("help"))
async def help_handler(message: Message):
    await message.answer(
        "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
        "/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/topcoins - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ç–æ–ø –º–æ–Ω–µ—Ç –∑–∞ –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—î—é\n"
        "/alerts - –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–≥–Ω–∞–ª–∏"
    )

@dp.message(Command("topcoins"))
async def topcoins_handler(message: Message):
    coins = await fetch_top_coins()
    if coins:
        text = "–¢–æ–ø –º–æ–Ω–µ—Ç:\n" + "\n".join(coins[:10])
    else:
        text = "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ."
    await message.answer(text)

@dp.message(Command("alerts"))
async def alerts_handler(message: Message):
    await message.answer("–ü–æ–∫–∏ —â–æ –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –†–æ–±–∏–º–æ –∞–ø–¥–µ–π—Ç —Å–∫–æ—Ä–æ üòâ")

# =======================
# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è MOBULA API
# =======================
async def fetch_top_coins():
    url = "https://api.mobula.pro/v1/coins"
    headers = {"Authorization": f"Bearer {MOBULA_API_KEY}"}
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as resp:
                if resp.status != 200:
                    return None
                data = await resp.json()
                # —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ –∫–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó —ñ –æ–±—Å—è–≥—É
                top = [
                    f"{c['symbol']} - Cap: {c['market_cap']:,} USD"
                    for c in data
                    if c['market_cap'] >= MIN_CAP and c['volume_24h'] >= MIN_VOLUME
                ]
                return top
    except Exception as e:
        print("–ü–æ–º–∏–ª–∫–∞ fetch_top_coins:", e)
        return None

# =======================
# –í–µ–±—Ö—É–∫
# =======================
async def on_startup(app: web.Application):
    await bot.set_webhook(WEBHOOK_URL)
    print("Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:", WEBHOOK_URL)

async def on_shutdown(app: web.Application):
    await bot.delete_webhook()
    await bot.session.close()

app = web.Application()
setup_application(app, dp, path=WEBHOOK_PATH)
app.on_startup.append(on_startup)
app.on_cleanup.append(on_shutdown)

# =======================
# –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ –∞–±–æ –Ω–∞ Render
# =======================
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=PORT)
