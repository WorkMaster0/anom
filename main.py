import telebot
import asyncio
import threading
from typing import Dict
from config import BOT_TOKEN, ADMIN_ID, ARBITRAGE_SETTINGS
from arbitrage.detector import arbitrage_detector
from risk_management.manager import risk_manager
from exchanges.binance_client import binance_client
from exchanges.bybit_client import bybit_client

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
active = False
opportunities_cache = []

@bot.message_handler(commands=['start'])
def start_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç—É"""
    bot.reply_to(message, "üöÄ –ê—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π –±–æ—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!\n\n"
                         "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
                         "/start - –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏\n"
                         "/scan - –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∞—Ä–±—ñ—Ç—Ä–∞–∂—É\n" 
                         "/balance - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É\n"
                         "/settings - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n"
                         "/stop - –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞")

@bot.message_handler(commands=['scan'])
def scan_command(message):
    """–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π"""
    global active
    active = True
    
    bot.reply_to(message, "üîç –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∞—Ä–±—ñ—Ç—Ä–∞–∂—É...")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    def scan_thread():
        asyncio.run(continuous_scan())
    
    threading.Thread(target=scan_thread, daemon=True).start()

@bot.message_handler(commands=['balance'])
def balance_command(message):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É"""
    async def get_balances():
        binance_balance = await binance_client.get_balance()
        bybit_balance = await bybit_client.get_balance()
        
        response = (f"üí∞ –ë–∞–ª–∞–Ω—Å–∏:\n\n"
                   f"‚Ä¢ Binance: {binance_balance:.2f} USDT\n"
                   f"‚Ä¢ Bybit: {bybit_balance:.2f} USDT\n"
                   f"‚Ä¢ –ó–∞–≥–∞–ª–æ–º: {binance_balance + bybit_balance:.2f} USDT")
        
        bot.reply_to(message, response)
    
    asyncio.run(get_balances())

@bot.message_handler(commands=['stop'])
def stop_command(message):
    """–ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞"""
    global active
    active = False
    bot.reply_to(message, "‚õî –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")

async def continuous_scan():
    """–ë–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–µ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∞—Ä–±—ñ—Ç—Ä–∞–∂—É"""
    global active, opportunities_cache
    
    while active:
        try:
            opportunities = await arbitrage_detector.find_arbitrage_opportunities()
            opportunities_cache = opportunities
            
            if opportunities:
                for opp in opportunities:
                    message = format_opportunity(opp)
                    bot.send_message(ADMIN_ID, message, parse_mode='HTML')
            
            await asyncio.sleep(ARBITRAGE_SETTINGS['refresh_interval'])
            
        except Exception as e:
            print(f"Scan error: {e}")
            await asyncio.sleep(5)

def format_opportunity(opportunity: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∞—Ä–±—ñ—Ç—Ä–∞–∂"""
    return f"""üéØ <b>–ê–†–ë–Ü–¢–†–ê–ñ –ó–ù–ê–ô–î–ï–ù–û!</b>

‚Ä¢ –¢–æ–∫–µ–Ω: {opportunity['symbol']}
‚Ä¢ –ö—É–ø–∏—Ç–∏: {opportunity['buy_exchange']} - ${opportunity['buy_price']:.2f}
‚Ä¢ –ü—Ä–æ–¥–∞—Ç–∏: {opportunity['sell_exchange']} - ${opportunity['sell_price']:.2f}
‚Ä¢ –°–ø—Ä–µ–¥: <b>{opportunity['spread']:.2f}%</b>

üí∞ –ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: ~{opportunity['spread'] * 0.8:.2f}%
‚è∞ –ß–∞—Å –¥—ñ—ó: ~2-5 —Ö–≤–∏–ª–∏–Ω

‚ö° <i>–®–≤–∏–¥–∫–æ –¥—ñ–π—Ç–µ!</i>"""

if __name__ == "__main__":
    print("üöÄ –ê—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    bot.infinity_polling()