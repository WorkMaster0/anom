import os
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
from aiohttp import web
from aiogram.webhook.aiohttp_server import setup_application

# =======================
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
# =======================
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "–í–ê–®_TELEGRAM_TOKEN")
APP_BASE_URL = os.environ.get("APP_BASE_URL", "https://your-domain.tld")
WEBHOOK_PATH = f"/webhook/{TELEGRAM_TOKEN}"
WEBHOOK_URL = APP_BASE_URL + WEBHOOK_PATH
PORT = int(os.environ.get("PORT", 8000))

# =======================
# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ Dispatcher
# =======================
bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# =======================
# –•–µ–Ω–¥–ª–µ—Ä–∏ –∫–æ–º–∞–Ω–¥
# =======================
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç üöÄ\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /help –¥–ª—è –∫–æ–º–∞–Ω–¥.")

@dp.message(Command("help"))
async def help(message: Message):
    await message.answer("/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/topcoins - —Ç–æ–ø –º–æ–Ω–µ—Ç\n/alerts - —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è")

@dp.message(Command("topcoins"))
async def topcoins(message: Message):
    # –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫–ª–∞–¥, –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
    coins = ["BTC - 30,000$", "ETH - 2,000$", "SOL - 25$"]
    await message.answer("–¢–æ–ø –º–æ–Ω–µ—Ç:\n" + "\n".join(coins))

@dp.message(Command("alerts"))
async def alerts(message: Message):
    await message.answer("–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è —â–µ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ üòâ")

# =======================
# –í–µ–±—Ö—É–∫ –¥–ª—è Render
# =======================
async def on_startup(app: web.Application):
    await bot.set_webhook(WEBHOOK_URL)
    print("Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:", WEBHOOK_URL)

async def on_shutdown(app: web.Application):
    await bot.delete_webhook()
    await bot.session.close()

app = web.Application()
setup_application(app, dp, path=WEBHOOK_PATH)
app.on_startup.append(on_startup)
app.on_cleanup.append(on_shutdown)

# =======================
# –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ uvicorn
# =======================
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=PORT)
